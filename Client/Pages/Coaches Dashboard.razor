@page "/Coaches-Dashboard"

@attribute [Authorize]
@layout MainLayout;


@inject HttpClient Http;
@inject AuthenticationStateProvider AuthProvider;



@using Microsoft.AspNetCore.Authorization
@using ProServ.Client.Controllers;
@using ProServ.Shared.Models.UserInfo;
@using Blazored.LocalStorage;
@using System.Net.Http.Headers;
@using System.Diagnostics;





<PageTitle>Dashboard</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Dashboard</h1>

        <h3>Welcome, AJ</h3>
        

        <div class="dashboard-container">
            <div class="dashboard-workouts">
                <RadzenCard style="border-radius: 25px;">
                    <h3>Workouts</h3>
                    <p>Workouts go here</p>

                </RadzenCard>


            </div>
            <div class="dashboard-control-center">

                <div>
                    <h3>My Info</h3>
                    <br />
                </div>
                <div class="dashboard-second-row">


                    <RadzenCard style="border-radius: 25px; width: 40%;">
                        <div class="mileage-stack">
                            <h4>This Weeks Mileage</h4>
                            <h4>@_currentMileage / @_goalMileage</h4>

                        </div>
                        <RadzenProgressBar Value="@_currentMileage" Max="@_goalMileage" ShowValue="false" />

                        <div class="workout-score">
                            <h3>This week's score</h3>
                            <RadzenChart>
                                <RadzenPieSeries Data="@workouts" Title="% Score" CategoryProperty="status" ValueProperty="percent">
                                    <RadzenLegend Visible="false" />
                                </RadzenPieSeries>
                            </RadzenChart>
                        </div>
                    </RadzenCard>
                    <RadzenCard style="border-radius: 25px; width: 60%;">
                        <div class="workout-calendar">
                            <h3> Calendar</h3>
                            <RadzenScheduler style="height: 80%;" @ref=@_scheduler SlotRender=@OnSlotRender TItem="WorkoutDate" Data=@workoutDates StartProperty="Start" EndProperty="End" TextProperty="Text">

                                <RadzenMonthView />
                                <RadzenWeekView />
                                <RadzenDayView />

                            </RadzenScheduler>
                        </div>
                    </RadzenCard>
                </div>
            </div>
        </div>
    </Authorized>

    <NotAuthorized>
        <p>Please log in to see this page</p>
    </NotAuthorized>
</AuthorizeView>

@code{
    //New stuff
    private UserInformation _userInformation;

    //Check it page is loading
    private bool _isLoading = true;

    //user permission state
    private string _userRole = "Member";





    protected override async Task OnInitializedAsync()
    {
        //Get user permission state
        try
        {
            var response = await Http.GetAsync("api/User/user-role");
            if (response.IsSuccessStatusCode)
            {
                this._userRole = await response.Content.ReadAsStringAsync();
            }
        }
        catch(Exception ex)
        {
            Debug.WriteLine("Error: " + ex);
            Console.WriteLine("Error : " + ex);
        }
        await base.OnInitializedAsync();
    }

    //New stuff

    //Old Stuff
    private double _currentMileage = 14;
    private double _goalMileage = 40;

    RadzenScheduler<WorkoutDate> _scheduler;

    IList<WorkoutDate> workoutDates = new List<WorkoutDate>{
          new WorkoutDate { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Birthday" },
            new WorkoutDate { Start = DateTime.Today.AddDays(-1), End = DateTime.Today.AddDays(-1), Text = "Meeting" },
            new WorkoutDate { Start = DateTime.Today, End = DateTime.Today, Text = "Lunch" },
            new WorkoutDate { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(1), Text = "Meeting" },
            new WorkoutDate { Start = DateTime.Today.AddDays(2), End = DateTime.Today.AddDays(2), Text = "Birthday" },

        };


    class Workout
    {
        public string status { get; set; }
        public double percent { get; set; }
    }

    class WorkoutDate
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public string Text { get; set; }
    }

    Workout[] workouts = new Workout[]{
        new Workout(){status = "Good", percent = 40},
        new Workout(){status = "Okay", percent = 20},
        new Workout(){status = "Bad", percent = 10},
        new Workout(){status = "Not Complete", percent = 30},
    };



    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }




}


