@attribute [Authorize(Roles = "Member, Assistant Coach, Coach, Admin, Sudo")]
@inject HttpClient Http;
@layout MainLayout;
@inject AuthenticationStateProvider AuthProvider;

@page "/Workout-Builder"

<PageTitle>Coaches Hub</PageTitle>

<AuthorizeView>
    <p>You are authorized</p>

    <AuthorizeView Roles="Sudo" Context="innerContext">
        <p>User: @innerContext.User</p>
        <p>You have sudo and admin permission</p>
    </AuthorizeView>
</AuthorizeView>

@*User Role Testing*@
@if (_isMember)
{
    <h1>Member</h1>
}
@if (_isAssistantCoach)
{
    <h1>Assistant Coach</h1>
}
@if (_isCoach)
{
    <h1>Coach</h1>
}
@if (_isAdmin)
{
    <h1>Admin</h1>
}
@if (_isSudo)
{
    <h1>Sudo</h1>
}

@code
{
    bool _isMember = false;
    bool _isAssistantCoach = false;
    bool _isCoach = false;
    bool _isAdmin = false;
    bool _isSudo = false;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState?.User;

        _isMember = user.IsInRole(nameof(UserRoles.Member));
        _isAssistantCoach = user.IsInRole(nameof(UserRoles.Assistant_Coach));
        _isCoach = user.IsInRole(nameof(UserRoles.Coach));
        _isAdmin = user.IsInRole(nameof(UserRoles.Admin));
        _isSudo = user.IsInRole(nameof(UserRoles.Sudo));
    }
}

