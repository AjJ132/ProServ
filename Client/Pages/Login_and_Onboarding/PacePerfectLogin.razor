@page "/pace-perfect-login"
@layout EmptyLayout;

@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthProvider;

@using ProServ.Shared.Models.NET_CORE_USER;
@using System.Net.Http.Json;
@using System.Net.Http;
@using System.Net.Http.Headers;
@using ProServ.Client.Controllers;
@using System.Security.Cryptography;





<div class="login-container">

    <RadzenCard class="login-content rz-border-radius-6" style="padding: 0;">
    <div class="login-split-left">
        <div class="center-login-content">
            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start">
                <h2>Pace Perfect</h2>
                <h4>Welcome To ProServ</h4>
                <span>Welcome back,<br />Please Login to your Account</span>
                <br />

                <span><p>Email</p></span>
                <RadzenTextBox @bind-Value="@_email" style="width: 100%;" />
                <span><p>Password</p></span>
                <RadzenPassword @bind-Value="@_password" style="width: 100%;" />
                <div>

                </div>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start">
                    <RadzenButton Text="Login" Click="@HandleValidSubmit" />
                    <RadzenButton Text="Register" Click="@NavigateToRegister" ButtonStyle="ButtonStyle.Warning" />
                    <RadzenButton Text="FillNLogin" Click="@FillNLogin" ButtonStyle="ButtonStyle.Secondary" />
                </RadzenStack>



            </RadzenStack>
        </div>
    </div>

    <div class="login-split-right">
        <img src="loginVector.png" />
    </div>
</RadzenCard>


</div>

<style>
    .login-container {
        margin-top: auto;
        width: 100vw;
        height: 100vh;
        position: relative;
        justify-content: center;
        align-items: center;
        display: flex;
        margin: auto;

        
        /* Gradient top left to bottom right */
        background-image: linear-gradient(to bottom right, #3776df, #99d5fb);
    }

    .login-content {
        width: 70%;
        max-width: 1000px;
        height: fit-content;
        overflow: hidden;


        /*There will be two sections. move them horizontally*/
        display: flex;
        flex-direction: row;

        /*Center the content*/
        justify-content: center;
        align-items: center;

        box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
        
    
    }

    :root {
        font-family: "Roboto";
        line-height: 1.5;
        font-weight: 400;
    }

    .login-split-right {
        width: 50%;
        overflow: hidden;
        position: relative;
        padding-top: 56.25%; /* for 16:9 aspect ratio. Change this value according to your needs */
    }

    .login-split-right img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        position: absolute;
        top: 0;
        left: 0;
    }

    .login-split-left {
        width: 50%;
        box-sizing: border-box;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .center-login-content{
        width: auto;
        margin: 1rem 1rem 1rem 1rem;
    }


</style>

@code{

    private RegisterUser _registerUser = new RegisterUser();
    private string _email = "";
    private string _password = "";


    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsync<string>("authToken");

        Console.WriteLine($"LoginPage() Retrieved token: {token}");

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            // User is authenticated
            NavigateToHome();
        }
        else
        {
            // User is not authenticated

        }
    }

    private void FillNLogin()
    {
        _email = "aj132@icloud.com";
        _password = "Johnson132";

        HandleValidSubmit();
    }

    private async Task HandleValidSubmit()
    {
        this._registerUser.Email = _email;
        this._registerUser.Password = _password;
        var response = await Http.PostAsJsonAsync("api/auth/Login", _registerUser);

        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();
            Console.WriteLine(token);
            await localStorage.SetItemAsync("token", token);
            await AuthProvider.GetAuthenticationStateAsync();




            // Check if user has completed onboarding process, if not, redirect to onboarding
            var onboardingStatus = await Http.GetAsync("api/User/Onboarding/Completed");

            if (onboardingStatus.IsSuccessStatusCode)
            {
                // Get variable 'completed' to see if user completed onboarding
                var didCompleteContent = await onboardingStatus.Content.ReadFromJsonAsync<bool>();
                if (didCompleteContent)
                {
                    // Navigate to home page
                    NavigateToHome();
                }
                else
                {
                    // Navigate to onboarding process if they are new user or previously exited process
                    NavigateToOnboarding();
                }
            }
            else
            {
                Console.WriteLine("Error getting onboarding status");
            }
        }
        else
        {
            Console.WriteLine("Error logging in");
        }
    }




    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/Dashboard");
    }

    private void NavigateToOnboarding()
    {
        NavigationManager.NavigateTo("/Onboarding");
    }

    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/Register");
    }


}