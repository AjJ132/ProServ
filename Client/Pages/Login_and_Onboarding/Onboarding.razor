@page "/Onboarding"
@using Radzen;
@using ProServ.Shared.Models.UserInfo;
@inject HttpClient Http;
@inject NavigationManager NavigationManager
@layout EmptyLayout;
@inject AuthenticationStateProvider AuthProvider;
@using System.Text.Json;
@using System.Text;

<PageTitle>User Onboarding</PageTitle>

@if (_savingUserInformation)
{
    <div class="loading-indicator">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Saving...</span>
        </div>
    </div>
}

@if (_savingUserProfile)
{
    <div class="loading-indicator">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Saving...</span>
        </div>
    </div>
}

<div class="onboarding-container">
    @if (currentStep == 1)
    {
        <RadzenCard class="onboarding-content">
            <RadzenButton Text="Click me" Click="@AutoFill"/>
            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
                <RadzenText Text="Welecome to ProServ! This is a quick onboarding process to get you started." />
                <RadzenTemplateForm TItem="UserInformation" data="@_userInformation" InvalidSubmit="@OnInvalidSubmit" Submit="@SubmitUserInfo">
                    <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenStack>
                                <!-- User Information-->
                                <RadzenFieldset Text="User Information">
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="4">
                                            <RadzenLabel Text="First Name" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenTextBox @bind-Value="_userInformation.FirstName" Name="FirstName" AllowClear="true" Placeholder="First Name" Style="width: 100%;" />
                                            <RadzenRequiredValidator Component="FirstName" Text="First name is required" Popup="true" Style="position: absolute" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <br />
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="4">
                                            <RadzenLabel Text="Last Name" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenTextBox @bind-Value="_userInformation.LastName" Name="LastName" AllowClear="true" Placeholder="Last Name" Style="width: 100%;" />
                                            <RadzenRequiredValidator Component="LastName" Text="Last name is required" Popup="true" Style="position: absolute" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <br />
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="4">
                                            <RadzenLabel Text="Birthday" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenDatePicker ShowTime="false" @bind-Value="_userInformation.Birthday" Name="DateOfBirth">
                                                <RadzenRequiredValidator Component="DateOfBirth" Text="Date of birth is required" Popup="true" Style="position: absolute" />
                                            </RadzenDatePicker>

                                        </RadzenColumn>
                                    </RadzenRow>
                                    <br />
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="4">
                                            <RadzenLabel Text="Phone number" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenTextBox @bind-Value="_phoneNumber" Name="PhoneNumber" AllowClear="true" Placeholder="Phone #" Style="width: 100%;" />
                                            <RadzenRequiredValidator Component="PhoneNumber" Text="Phone number is required" Popup="true" Style="position: absolute" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <br />
                                </RadzenFieldset>
                                <!-- Address-->
                                <RadzenFieldset Text="Address">
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="4">
                                            <RadzenLabel Text="City" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenTextBox @bind-Value="_userInformation.City" Name="City" AllowClear="true" Placeholder="City" Style="width: 100%;" />
                                            <RadzenRequiredValidator Component="City" Text="City is required" Popup="true" Style="position: absolute" />

                                        </RadzenColumn>
                                    </RadzenRow>
                                    <br />
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="4">
                                            <RadzenLabel Text="State" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenTextBox @bind-Value="_userInformation.State" Name="State" AllowClear="true" Placeholder="State" Style="width: 100%;" />
                                            <RadzenRequiredValidator Component="State" Text="State is required" Popup="true" Style="position: absolute" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <br />
                                </RadzenFieldset>
                            </RadzenStack>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="6">
                            <!-- More Information-->
                            <RadzenFieldset Text="Personal Info">
                                <RadzenRow AlignItems="AlignItems.Center">
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="Height" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenNumeric @bind-Value="_heightFeet" Max="7" Min="2" Placeholder="00" Style="width: 100%;" />
                                        <RadzenText Text="Feel free to leave this blank" />
                                    </RadzenColumn>
                                </RadzenRow>
                                <RadzenRow AlignItems="AlignItems.Center">
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="Height" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenNumeric @bind-Value="_heightInches" Max="11" Min="0" Placeholder="00" Style="width: 100%;" />
                                        <RadzenText Text="Feel free to leave this blank" />
                                    </RadzenColumn>
                                </RadzenRow>
                                <br />
                                <RadzenRow AlignItems="AlignItems.Center">
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="Weight" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenNumeric @bind-Value="_userInformation.Weight" Max="500" Min="50" Placeholder="00" Style="width: 100%;" />
                                        <RadzenText Text="Feel free to leave this blank" />
                                    </RadzenColumn>
                                </RadzenRow>
                                <br />
                                <RadzenRow AlignItems="AlignItems.Center">
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="Gender" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenDropDown @bind-Value="_userInformation.Gender" Data="@_genders" style="width: 100%;" />
                                        <RadzenText Text="Feel free to leave this blank" />
                                    </RadzenColumn>
                                </RadzenRow>
                                <br />
                                <RadzenRow AlignItems="AlignItems.Center">
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="Are you in high school?" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenSwitch @bind-Value="@_userInformation.IsInHighschool" />
                                    </RadzenColumn>
                                </RadzenRow>
                                <br />
                                <RadzenRow AlignItems="AlignItems.Center">
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="School" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenTextBox @bind-Value="_userInformation.School" AllowClear="true" Placeholder="School" Style="width: 100%;" />
                                        <RadzenText Text="Please enter the name of you school/institution here" />
                                    </RadzenColumn>
                                </RadzenRow>
                                <br />
                            </RadzenFieldset>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Save"></RadzenButton>

                </RadzenTemplateForm>
            </RadzenStack>
        </RadzenCard>

    }
    else if (currentStep == 2)
    {
        <RadzenCard>
            <RadzenTemplateForm TItem="UserProfile" Data="@_userProfile" InvalidSubmit="@OnInvalidSubmit" Submit="SubmitUserProfile">
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenText Text="Just a few more questions and we're off to the races!" />
                    <br />
                    <RadzenText Text="What is your best event when it comes to track and field or cross country?" />
                    <RadzenTextBox @bind-Value="_userProfile.BestEvent" Name="BestEvent" AllowClear="true" Placeholder="Best Event" Style="width: 100%;" />
                    <RadzenRequiredValidator Component="BestEvent" Text="Best Event is required" Popup="true" Style="position: absolute" />
                    <br />
                    <RadzenText Text="What is your primary goal when using this service?" />
                    <RadzenTextBox @bind-Value="_userProfile.PrimaryGoal" Name="PrimaryGoal" AllowClear="true" Placeholder="Primary Goal" Style="width: 100%;" />
                    <RadzenRequiredValidator Component="PrimaryGoal" Text="Primary Goal is required" Popup="true" Style="position: absolute" />
                    <br />
                    <RadzenText Text="Why did you chose to run? Is it Fun? Help you relax? (FIX THIS)" />
                    <RadzenTextBox @bind-Value="_userProfile.WhyRun" Name="WhyRun" AllowClear="true" Placeholder="Why Run?" Style="width: 100%;" />
                    <RadzenRequiredValidator Component="WhyRun" Text="Why Run is required" Popup="true" Style="position: absolute" />
                    <br />
                    <RadzenText Text="Would you rather get a world record or win the Olympics in your event?" />
                    <RadzenTextBox @bind-Value="_userProfile.RecordOrOlympics" Name="RecordOrOlympics" AllowClear="true" Placeholder="World Record or Olympics?" Style="width: 100%;" />
                    <RadzenRequiredValidator Component="RecordOrOlympics" Text="Record or Olympics is required" Popup="true" Style="position: absolute" />
                    <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Save"></RadzenButton>
                </RadzenStack>
            </RadzenTemplateForm>
        </RadzenCard>

    }
</div>

<style>
    .onboarding-container {
        margin-top: auto;
        width: 100vw;
        height: 100vh;
        position: relative;
        justify-content: center;
        align-items: center;
        display: flex;
        margin: auto;
    }

    .onboarding-content {
        width: 50%;
        height: fit-content;
        padding: 3rem 1.5rem 3rem 1.5rem;
    }

    .loading-indicator {
        position: fixed;
        z-index: 10000;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>


@code{
    UserInformation _userInformation = new UserInformation();
    UserProfile _userProfile = new UserProfile();

    string _phoneNumber = "";
    int _heightFeet = 0;
    int _heightInches = 0;

    List<string> _genders = new List<string>{
        "Male",
        "Female",
        "Perfer not to say"
        };

    bool _savingUserInformation = false;
    bool _savingUserProfile = false;

    bool _completedUserInformation = true;
    bool _completedUserProfile = false;

    private int currentStep = 1;


    protected override async Task OnInitializedAsync()
    {
        //Check to see if they have already been onboarded and navigate them to dashboard if they are
        //First get userId
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        string id = authState.User.FindFirst(ClaimTypes.NameIdentifier).Value;

        //if no ID then throw error
        // TODO: implement error handling

        //check to see if ID has already completed onboarding status
        var onboardingStatus = await Http.GetAsync($"api/User/Onboarding/Completed");

        if(onboardingStatus.IsSuccessStatusCode)
        {
            var didComplete = await onboardingStatus.Content.ReadFromJsonAsync<bool>();

            if(didComplete)
            {
                Console.WriteLine("User already completed Onboarding proccess");
                NavigationManager.NavigateTo("/Dashboard");
            }
            else
            {
                //check to see if they completed first step of proccess by checking for user information table TODO
                var userInfoExists = await Http.GetAsync($"api/User/user-information/exists");
                if(userInfoExists.IsSuccessStatusCode)
                {
                    var hasUserInfo = await userInfoExists.Content.ReadFromJsonAsync<bool>();
                    if(hasUserInfo)
                    {
                        //its backwards
                        this._completedUserInformation = false;
                        this._completedUserProfile = true;
                        currentStep++;
                    }

                }

                Console.WriteLine("Starting Onboarding proccess");
            }
        }
        else
        {
            Console.WriteLine("Error finding user in database");
            NavigationManager.NavigateTo("");
        }
    }


    private async void SubmitUserInfo(UserInformation userInformation)
    {

        //get user id
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        string userID = authState.User.FindFirst(ClaimTypes.NameIdentifier).Value;
        userInformation.UserId = userID;

        //concatenate height
        userInformation.Height = _heightFeet.ToString() + "'" + _heightInches.ToString() + "\"";

        //Set ReportsTo to Default user (Sarah) might need to change in the future
        userInformation.ReportsTo = "";
        userInformation.UserType = "Member";
        userInformation.DateCreated = DateTime.Now;
        userInformation.LastAccessed = DateTime.Now;
        userInformation.ActiveUser = true;
        userInformation.TeamID = 0;

        //First put phone number then post user information

        var phoneNumberContent = new StringContent(JsonSerializer.Serialize(_phoneNumber), Encoding.UTF8, "application/json");
        Console.WriteLine(phoneNumberContent.ToString());
        var putPhoneNumber = await Http.PutAsJsonAsync($"api/auth/PhoneNumber", _phoneNumber);



        //Check if phone number was successfully updated
        if (!putPhoneNumber.IsSuccessStatusCode)
        {
            Console.WriteLine("Error updating phone number");
        }
        else
        {




            var postUserInfo = await Http.PostAsJsonAsync("api/User/UserInformation", userInformation);
            //Check if user information was successfully posted
            if (!postUserInfo.IsSuccessStatusCode)
            {
                Console.WriteLine("Error posting user information");
            }
            else
            {
                //its backwards
                this._completedUserInformation = false;
                this._completedUserProfile = true;
                currentStep++;
                StateHasChanged();
            }
        }
    }

    private async void SubmitUserProfile(UserProfile userProfile)
    {
        if (_completedUserProfile)
        {
            //TODO error handling for userid
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            string userID = authState.User.FindFirst(ClaimTypes.NameIdentifier).Value;

            userProfile.UserId = userID;

            var response = await Http.PostAsJsonAsync("api/User/Profile", userProfile);
            //Check if user profile was successfully posted
            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine("Error posting user profile");
            }
            else
            {


                //if completed move to home page
                //its backwards
                if (!_completedUserInformation && _completedUserProfile)
                {
                    //if True update UserOnboarding page then navigate to HomePage
                    bool status = true;
                    var updateOnboarding = await Http.PutAsJsonAsync($"api/User/Onboarding/Complete", status);

                    UserTrackRecords newRecords = new UserTrackRecords { UserId = userID };
                    var insertUserRecordsRequest = await Http.PostAsJsonAsync("api/User/track-records", newRecords);

                    if (!updateOnboarding.IsSuccessStatusCode)
                    {
                        Console.WriteLine("Error updating UserOnboarding");
                    }
                    else
                    {
                        Console.WriteLine("UserOnboarding updated");
                        NavigationManager.NavigateTo("/Dashboard");
                    }

                }
            }

        }
    }

    private void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        Console.WriteLine("Invalid Submit");
    }

    private void AutoFill()
    {
        this._userInformation.FirstName = "Sarah";
        this._userInformation.LastName = "Hendrick";
        this._userInformation.Birthday = new DateTime(2000, 07, 04);
        this._phoneNumber = "470-281-8766";
        this._userInformation.City = "Kennesaw";
        this._userInformation.State = "GA";
        this._userInformation.Height = "5'7\"";
        this._userInformation.Weight = 135;
        this._userInformation.Gender = "Female";
        this._userInformation.IsInHighschool = false;
        this._userInformation.School = "";
    }

}