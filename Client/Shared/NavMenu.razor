@inject HttpClient Http;

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">ProServ</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        @if(this._userRole.Equals("Member"))
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Dashboard" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Settings" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Workouts
                </NavLink>
            </div>
        }
        else if (this._userRole.Equals("Coach"))
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Coaches-Dashboard" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Workout-Builder">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Workout Builder
                </NavLink>
            </div>
        }

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="Settings">
                <span class="oi oi-plus" aria-hidden="true"></span> Settings
            </NavLink>
        </div>
       
       
    </nav>
</div>

@code {

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private string _userRole = "Member";

    protected override async Task OnInitializedAsync()
    {
        //Get user permission state
        try
        {
            var userRoleResponse = await Http.GetAsync("api/User/user-role");
            if (userRoleResponse.IsSuccessStatusCode)
            {
                this._userRole = await userRoleResponse.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error in getting permission state : " + ex);

        }

        await base.OnInitializedAsync();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}

